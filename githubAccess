import pandas as pd
import plotly.express as px
from plotly.offline import plot
import plotly.graph_objects as go
import datetime
from github import Github

commit_total = 0
author_name = "a"
d1 = datetime.datetime(2018, 11, 1)
# twbs/bootstrap
# nodejs/node
g = Github("")

repo = g.get_repo("PyGithub/PyGithub")

df = pd.DataFrame(columns=["Author", "Date", "Commits"])    # dataframe to hold commits
users = ['Ferada', 'Hanaasagi', 'adambaratz', 'blatinier',
 'nagapavan', 's-t-e-v-e-n-k', 'sfdye']

# count number of commits for each user who committed over past year
for user in users:
    for commit in repo.get_commits():
        author_date = commit.commit.author.date
        try:
            author_name = commit.author.login
            if author_date > d1:
                if user == author_name:
                    commit_total += 1
                    print(author_name, author_date, commit_total)
                    new_row = {'Author': author_name, "Date": author_date, "Commits": commit_total}
                    df = df.append(new_row, ignore_index=True)
            else:
                break
        except AttributeError:
            if author_date >= d1:
                commit_total += 1
                print(",", author_date, commit_total)
    commit_total = 0

max_val = 0
# adjust commit total
for user in users:
    mask = (df['Author'] == user)
    max_val = df.loc[df['Author'] == user].Commits.max()
    df['Commits'][mask] = abs(df['Commits'] - max_val)
print(df)

# draw graph
fig = px.line(df, x="Date", y="Commits",
              line_group="Author", color = "Author")

# add slider to view commits over 1 month, 3 months, 6 months or 1 year
fig.update_layout(
    xaxis=go.layout.XAxis(
        rangeselector=dict(
            buttons=list([
                dict(count=1,
                     label="1m",
                     step="month",
                     stepmode="backward"),
                dict(count=3,
                     label="3m",
                     step="month",
                     stepmode="backward"),
                dict(count=6,
                     label="6m",
                     step="month",
                     stepmode="backward"),
                dict(count=1,
                     label="1y",
                     step="year",
                     stepmode="backward"),
                dict(step="all")
            ])
        ),
        rangeslider=dict(
            visible=True
        ),
        type="date"
    )
)
# display graph locally
plot(fig)
